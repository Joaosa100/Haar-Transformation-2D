//#include "mbed.h"
//#include "stm32f0xx.h"
#include <stdio.h>
#include <time.h>

#define IMAGE_SIZE 90
//ENTRE 28us e 29us

//Serial pc(SERIAL_TX, SERIAL_RX);

void haarTransform2d(const __uint8_t input[][IMAGE_SIZE]) {
    __uint8_t col, row;
    __uint16_t sum;
    //printf("Resultado da Transformada:\n");

    for(row = 0; row < IMAGE_SIZE - 1; row = row + 2){
        for(col = 0; col < IMAGE_SIZE - 1 ; col = col + 2){
            //__uint16_t a = input[row][col], b = input[row][col+1], c = input[row+1][col], d = input[row+1][col+1];
            sum = input[row][col] + input[row][col+1] + input[row+1][col] + input[row+1][col+1];
            //printf("%4d, %4d, %4d, %4d, %4d,", input[row][col], input[row][col+1], input[row+1][col], input[row+1][col+1], sum);        
            sum = sum / 2;
            sum = (sum < 0) ? 0 : ((sum > 255) ? 255 : sum);
            //printf("%4d ", sum);

        }
        //printf("\n");
    }
}

int main() {
    //printf("Haar Transform - mbed OS 2\n");
    static const __uint8_t input_image[][IMAGE_SIZE] = {
        //matrix here
    };


    //printf("Aplicando a transformada em uma imagem de %dx%d ...\n", IMAGE_SIZE, IMAGE_SIZE);
    //printf("Saída será do tamanho %dx%d\n", IMAGE_SIZE / 2, IMAGE_SIZE / 2);

    struct timespec start, end;
    clock_gettime(CLOCK_MONOTONIC, &start);

    haarTransform2d(input_image);

    clock_gettime(CLOCK_MONOTONIC, &end);

    double tempo_execucao = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;
    printf("Tempo de execução da Transformação de Haar: %f segundos\n", tempo_execucao);

    //printf("Execucao Completa.\n");
    
    //while(true);
    //for(;;);
}